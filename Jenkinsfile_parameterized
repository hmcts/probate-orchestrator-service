#!groovy
//noinspection GroovyUnusedAssignment
@Library("Infrastructure") _

//noinspection GroovyAssignabilityCheck
properties([
		parameters([
			choice(name: 'ENVIRONMENT', choices: 'sandbox\nsaat\nsprod\nnonprod\nprod', description: 'Environment where code should be build and deployed')
		])
])


String product = "probate"
String component = "orchestrator-service"

List<LinkedHashMap<String, Object>> secrets = [
        secret('probatePersistenceUrl', 'TEST_PERSISTENCE_URL'),
        secret('probateBusinessUrl', 'TEST_BUSINESS_URL'),
        secret('s2s-probate-backend', 'S2S_PROBATE_BACKEND_SECRET'),
        secret('probateIdamSecret', 'IDAM_SECRET'),
        secret('probateIdamUserName', 'IDAM_USERNAME'),
        secret('probateIdamPassword', 'IDAM_PASSWORD'),
        secret('probateCcdDataStoreApi', 'CCD_DATA_STORE_API_URL'),
        secret('probateServiceAuthUrl', 'SERVICE_AUTH_PROVIDER_BASE_URL'),
        secret('probateUserAuthUrl', 'USER_AUTH_PROVIDER_OAUTH2_URL'),
        secret('probateIdamOauthRedirectUrl', 'IDAM_OAUTH2_REDIRECT_URI'),
        secret('probate-mail-host', 'PROBATE_SUB_MAIL_HOST'),
        secret('probate-mail-username', 'PROBATE_SUB_MAIL_USERNAME'),
        secret('probate-mail-password', 'PROBATE_SUB_MAIL_PASSWORD'),
        secret('probate-mail-port', 'PROBATE_SUB_MAIL_PORT'),
        secret('probate-mail-sender', 'PROBATE_SUB_MAIL_SENDER'),
        secret('probate-mail-recipient', 'PROBATE_SUB_MAIL_REC'),
        secret('idamRedirectUrl', 'IDAM_REDIRECT_URL'),
        secret('payCaseWorkerUser','PAYMENT_CASEWORKER_USERNAME'),
        secret('payCaseWorkerPass','PAYMENT_CASEWORKER_PASSWORD'),
        secret('schedulerCaseWorkerUser','SCHEDULER_CASEWORKER_USERNAME'),
        secret('schedulerCaseWorkerPass','SCHEDULER_CASEWORKER_PASSWORD')
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withParameterizedPipeline('java', product, component, params.ENVIRONMENT, 'sandbox') {
  env.PACT_BROKER_URL = "http://pact-broker.service.core-compute-saat.internal/"
  loadVaultSecrets(secrets)
  after ('build') {
    try {
        sh './gradlew contract'
        sh './gradlew pactPublish'
    } finally {
        //steps.archiveArtifacts "build/reports/pitest/**/*.*"
    }
  }

  after('test') {
    junit 'build/test-results/test/**/*.xml'
    archiveArtifacts 'build/reports/tests/test/index.html'
    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/test",
            reportFiles          : "index.html",
            reportName           : "probate-orchestrator-service Test Report"
    ]

    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/jacoco",
            reportFiles          : "index.html",
            reportName           : "probate-orchestrator-service Code Coverage Report"
    ]

    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/findbugs",
            reportFiles          : "main.html",
            reportName           : "probate-orchestrator-service find Bugs Report"
    ]
  }

  after('functionalTest:saat') {
      publishHTML target: [
              reportDir            : "target/site/serenity/",
              reportFiles          : "index.html",
              reportName           : "SAAT Functional Tests",
              alwaysLinkToLastBuild: true
      ]
  }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }
}
