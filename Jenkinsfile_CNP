#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GradleBuilder

@Library("Infrastructure")

String product = "probate"
String component = "orchestrator-service"

def secrets = [
        'probate-${env}'      : [
        secret('s2s-probate-backend', 'S2S_AUTH_TOTP_SECRET'),
        secret('probateIdamSecret', 'IDAM_SECRET'),
        secret('serviceAuthProviderBaseUrl', 'SERVICE_AUTH_PROVIDER_BASE_URL'),
        secret('probateUserAuthUrl', 'USER_AUTH_PROVIDER_OAUTH2_URL'),
        secret('probateIdamOauthRedirectUrl', 'IDAM_OAUTH2_REDIRECT_URI'),
        secret('probate-service-id', 'IDAM_CLIENT_ID'),
        secret('cwUserEmail', 'CW_USER_EMAIL'),
        secret('cwUserPass', 'CW_USER_PASSWORD'),
        secret('launchdarkly-key', 'LAUNCHDARKLY_KEY'),
        secret('launchdarklyUserkeyBackend', 'LD_USER_KEY'),
]]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

// Configure branches to sync with master branch
def branchesToSync = ['demo', 'ithc', 'perftest']

GradleBuilder builder = new GradleBuilder(this, product)

withPipeline("java", product, component) {
    loadVaultSecrets(secrets)
    enableAksStagingDeployment()
    disableLegacyDeployment()
    enableSlackNotifications('#probate-jenkins')
    env.IDAM_CLIENT="probate"
    syncBranchesWithMaster(branchesToSync)

//    before('buildinfra:prod') {
//            error 'Deliberately breaking pipeline to prevent prod deployment.'
//    }

    afterSuccess('test') {

//        try {
//            if (env.CHANGE_BRANCH || env.BRANCH_NAME == 'master') {
//                env.PACT_BROKER_URL = "pact-broker.platform.hmcts.net"
//                env.PACT_BROKER_PORT = "443"
//                env.PACT_BROKER_SCHEME = "https"
//                env.PACT_BROKER_FULL_URL = "https://pact-broker.platform.hmcts.net"
//                env.PACT_BRANCH_NAME = env.CHANGE_BRANCH
//                if (env.BRANCH_NAME == 'master') {
//                    env.PACT_BRANCH_NAME = 'master'
//                }
//                // sh './gradlew pitest'
//                env.PACT_BROKER_VERSION = sh(returnStdout: true, script: 'git rev-parse --verify --short HEAD')
//                sh 'printenv'
//                sh './gradlew runConsumerPactTests'
//                sh './gradlew runProviderPactTests -Dpact.provider.version=${PACT_BROKER_VERSION}'
//                sh './gradlew pactPublish'
//                sh 'curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.63.0/pact-1.63.0-linux-x86_64.tar.gz'
//                sh 'tar xzf pact-1.63.0-linux-x86_64.tar.gz'
//                dir('pact/bin') {
//                    //sh './pact-broker can-i-deploy --retry-while-unknown=12 --retry-interval=10 -a probate_orchestrator_service -b ${PACT_BROKER_FULL_URL} -e ${PACT_BROKER_VERSION}'
//                }
//            }
//            } finally {
//                //steps.archiveArtifacts "build/reports/pitest/**/*.*"
//                archiveArtifacts "build/reports/tests/**/*.*"
//            }



        junit 'build/test-results/test/**/*.xml'
        archiveArtifacts 'build/reports/tests/test/index.html'
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/test",
                reportFiles          : "index.html",
                reportName           : "probate-orchestrator-service Test Report"
        ]

        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/jacoco",
                reportFiles          : "index.html",
                reportName           : "probate-orchestrator-service Code Coverage Report"
        ]

        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/findbugs",
                reportFiles          : "main.html",
                reportName           : "probate-orchestrator-service find Bugs Report"
        ]

        publishHTML target: [
                        allowMissing         : true,
                        alwaysLinkToLastBuild: true,
                        keepAll              : true,
                        reportDir            : "build/reports/tests/integration",
                        reportFiles          : "index.html",
                        reportName           : "probate-submit-service integrationTest Report"
                ]
    }

    afterSuccess('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "target/site/serenity/",
                reportFiles          : "index.html",
                reportName           : "Functional Tests Report"
        ]
    }

    afterSuccess('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "target/site/serenity/",
                reportFiles          : "index.html",
                reportName           : "Functional Tests Report"
        ]
    }

    env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'

    onMaster() {
        env.PACT_BRANCH_NAME = "master"
        enablePactAs([
                AppPipelineDsl.PactRoles.CONSUMER,
                AppPipelineDsl.PactRoles.PROVIDER
        ])
    }

    onPR() {
        enablePactAs([
                AppPipelineDsl.PactRoles.CONSUMER,
                AppPipelineDsl.PactRoles.PROVIDER
        ])
    }
}
